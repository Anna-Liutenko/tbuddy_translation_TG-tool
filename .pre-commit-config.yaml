repos:
  # Pre-commit hooks for repository health monitoring
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # File size checks
      - id: check-added-large-files
        args: ['--maxkb=50000']  # 50MB limit
        name: Check for large files
        description: Prevent files larger than 50MB from being committed
      
      # Git-related checks
      - id: check-case-conflict
        name: Check for case conflicts
        description: Check for files that would conflict in case-insensitive filesystems
      
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for files that contain merge conflict strings
      
      # File formatting
      - id: trailing-whitespace
        name: Trim trailing whitespace
        description: Remove trailing whitespace from files
      
      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensure files end with a newline
      
      # JSON/YAML validation
      - id: check-json
        name: Check JSON files
        description: Validate JSON file syntax
      
      - id: check-yaml
        name: Check YAML files
        description: Validate YAML file syntax
      
      # Security checks
      - id: detect-private-key
        name: Detect private keys
        description: Detect private keys in files
      
      - id: check-executables-have-shebangs
        name: Check script shebangs
        description: Ensure executable scripts have shebangs

  # Python-specific hooks
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        name: Format Python code with Black
        description: Auto-format Python code
        language_version: python3
        args: [--line-length=88]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        name: Lint Python code with Flake8
        description: Check Python code style and quality
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security scan with Bandit
        description: Scan Python code for security issues
        args: [--skip, B101,B601]
        files: \.py$

  # Custom local hooks
  - repo: local
    hooks:
      # Repository health check
      - id: repo-health-check
        name: Repository health check
        entry: python git_push_resolver.py --no-auto-fix --path .
        language: system
        pass_filenames: false
        stages: [pre-push]
        description: Check repository health before push
      
      # Security validation
      - id: security-validation
        name: Security validation
        entry: python security/validate_security.py --repo-path . --quiet
        language: system
        pass_filenames: false
        description: Run security validation checks
        
      # Large file detection
      - id: large-file-check
        name: Large file detection
        entry: python git_lfs_manager.py scan --size-limit 50 --format json
        language: system
        pass_filenames: false
        description: Check for large files that should use LFS
      
      # Environment file check
      - id: env-file-check
        name: Environment file check
        entry: bash -c 'if git diff --cached --name-only | grep -E "\.(env|key|pem)$"; then echo "❌ Environment or key files detected in staging area" && exit 1; fi'
        language: system
        pass_filenames: false
        description: Prevent environment and key files from being committed
      
      # Database file check
      - id: database-file-check
        name: Database file check
        entry: bash -c 'if git diff --cached --name-only | grep -E "\.(db|sqlite|sqlite3)$"; then echo "⚠️  Database files detected - consider adding to .gitignore" && exit 1; fi'
        language: system
        pass_filenames: false
        description: Prevent database files from being committed
      
      # Test validation
      - id: test-validation
        name: Test validation
        entry: python comprehensive_test_runner.py --quick
        language: system
        pass_filenames: false
        stages: [pre-push]
        description: Run quick test validation before push